// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	fleet "github.com/ns1labs/orb/fleet"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ns1labs/orb/pkg/types"
)

// AgentRepository is an autogenerated mock type for the AgentRepository type
type AgentRepository struct {
	mock.Mock
}

// RetrieveAll provides a mock function with given fields: ctx, owner, pm
func (_m *AgentRepository) RetrieveAll(ctx context.Context, owner string, pm fleet.PageMetadata) (fleet.Page, error) {
	ret := _m.Called(ctx, owner, pm)

	var r0 fleet.Page
	if rf, ok := ret.Get(0).(func(context.Context, string, fleet.PageMetadata) fleet.Page); ok {
		r0 = rf(ctx, owner, pm)
	} else {
		r0 = ret.Get(0).(fleet.Page)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, fleet.PageMetadata) error); ok {
		r1 = rf(ctx, owner, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllByAgentGroupID provides a mock function with given fields: ctx, owner, agentGroupID, onlinishOnly
func (_m *AgentRepository) RetrieveAllByAgentGroupID(ctx context.Context, owner string, agentGroupID string, onlinishOnly bool) ([]fleet.Agent, error) {
	ret := _m.Called(ctx, owner, agentGroupID, onlinishOnly)

	var r0 []fleet.Agent
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) []fleet.Agent); ok {
		r0 = rf(ctx, owner, agentGroupID, onlinishOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fleet.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, owner, agentGroupID, onlinishOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByID provides a mock function with given fields: ctx, ownerID, thingID
func (_m *AgentRepository) RetrieveByID(ctx context.Context, ownerID string, thingID string) (fleet.Agent, error) {
	ret := _m.Called(ctx, ownerID, thingID)

	var r0 fleet.Agent
	if rf, ok := ret.Get(0).(func(context.Context, string, string) fleet.Agent); ok {
		r0 = rf(ctx, ownerID, thingID)
	} else {
		r0 = ret.Get(0).(fleet.Agent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ownerID, thingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByIDWithChannel provides a mock function with given fields: ctx, thingID, channelID
func (_m *AgentRepository) RetrieveByIDWithChannel(ctx context.Context, thingID string, channelID string) (fleet.Agent, error) {
	ret := _m.Called(ctx, thingID, channelID)

	var r0 fleet.Agent
	if rf, ok := ret.Get(0).(func(context.Context, string, string) fleet.Agent); ok {
		r0 = rf(ctx, thingID, channelID)
	} else {
		r0 = ret.Get(0).(fleet.Agent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, thingID, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveMatchingAgents provides a mock function with given fields: ctx, owner, tags
func (_m *AgentRepository) RetrieveMatchingAgents(ctx context.Context, owner string, tags types.Tags) (types.Metadata, error) {
	ret := _m.Called(ctx, owner, tags)

	var r0 types.Metadata
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Tags) types.Metadata); ok {
		r0 = rf(ctx, owner, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.Tags) error); ok {
		r1 = rf(ctx, owner, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, agent
func (_m *AgentRepository) Save(ctx context.Context, agent fleet.Agent) error {
	ret := _m.Called(ctx, agent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fleet.Agent) error); ok {
		r0 = rf(ctx, agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAgentByID provides a mock function with given fields: ctx, ownerID, agent
func (_m *AgentRepository) UpdateAgentByID(ctx context.Context, ownerID string, agent fleet.Agent) error {
	ret := _m.Called(ctx, ownerID, agent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, fleet.Agent) error); ok {
		r0 = rf(ctx, ownerID, agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDataByIDWithChannel provides a mock function with given fields: ctx, agent
func (_m *AgentRepository) UpdateDataByIDWithChannel(ctx context.Context, agent fleet.Agent) error {
	ret := _m.Called(ctx, agent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fleet.Agent) error); ok {
		r0 = rf(ctx, agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHeartbeatByIDWithChannel provides a mock function with given fields: ctx, agent
func (_m *AgentRepository) UpdateHeartbeatByIDWithChannel(ctx context.Context, agent fleet.Agent) error {
	ret := _m.Called(ctx, agent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fleet.Agent) error); ok {
		r0 = rf(ctx, agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
